// task 3.5.1.
 struct ClsPubl
 {
	 ClsPubl(char _c, double _d, int _i);
 public:
	 char c;
	 double d;
	 int i;
 };

/* в коде определены три функции get_c, get_d и get_i, которые предоставляют ссылки на соответствующие поля структуры
ClsPubl. Функции get_c, get_d и get_i использую указатель на void для получения доступа к закрытым данным структы
ClsPubl.  Это делается с помощью операции static_cast, которая выполняет приведение типов указателей.

Также в коде отсутствует определение самой структуры Cls, поэтому невозможно оценить ее отношение к структур ClsPubl.

В целом, код выглядит правильным и может быть использован для получения доступа к закрытым членам структуры ClsPubl
извне Однако, может и привести к ошибкам в работе программ. */


// Эта функция должна предоставить доступ к полю c объекта cls.
// Обратите внимание, что возвращается ссылка на char, т. е.
// доступ предоставляется на чтение и запись.

/* Функция get_c получает ссылку на объект Cls и использует указатель на void для получения доступа к закрытому полю c
структуры ClsPubl. Затем указатель на void приводится к указателю на структуру ClsPubl с помощью операции static_cast.
Полученный указатель используется для доступа к полю c, после чего возвращается ссылка на это поле. Таким образом,
функция позволяет получить доступ к закрытому члену структуры ClsPubl извне.   */

 char& get_c(Cls& cls) {  // Функция get_c принимает объект типа Cls по ссылке и возвращает ссылку на его член-данные типа char.
	 void* voidptr = static_cast<void*>(&cls);  // выполняет преобразование указателя на объект класса "cls" в указатель
	// типа void, используя оператор static_cast. Таким образом, полученный указатель может быть передан в функцию,
	// которая принимает указатель на void, и затем использован для доступа к объекту класса.

	 struct ClsPubl* p = static_cast<ClsPubl*>(voidptr);  // p - это указатель на структуру ClsPubl, который был
	                                                      // приведен из типа void* с помощью оператора static_cast.
	 return p->c;  // возвращает значение переменной с
 }

// Эта функция должна предоставить доступ к полю d объекта cls.
// Обратите внимание, что возвращается ссылка на double, т. е.
// доступ предоставляется на чтение и запись.
 double& get_d(Cls& cls)
 {
	 void* voidptr = static_cast<void*>(&cls);
	 struct ClsPubl* p = static_cast<ClsPubl*>(voidptr);
	 return p->d;
 }

// Эта функция должна предоставить доступ к полю i объекта cls.
// Обратите внимание, что возвращается ссылка на int, т. е.
// доступ предоставляется на чтение и запись.
 int& get_i(Cls& cls)
 {
	 void* voidptr = static_cast<void*>(&cls);
	 struct ClsPubl* p = static_cast<ClsPubl*>(voidptr);
	 return p->i;
 }