// task 5.2.1.
/* Этот код содержит определение структуры Rational, которая представляет дробь в числовом формате. Она имеет
конструктор со значениями по умолчанию для числителя и знаменателя, а также методы для выполнения арифметических
операций и унарных операций над дробями: сложение, вычитание, умножение, деление, отрицание и нахождение обратной дроби.
 Кроме того, определены операторы +=, -=, *=, /= для выполнения соответствующих операций с присваиванием и операторы - и
  + для взятия противоположной и положительной дроби соответственно. Класс содержит два приватных поля: числитель и
  знаменатель.
  */
struct Rational  // определяем класс
{
    Rational(int numerator = 0, int denominator = 1);  // устанавливаем две переменные со значениями по умолчанию

    // методы add, sub, mul и div, которые прибавляют к нему число, отнимают число, умножают на число и делят на число соответственно
    void add(Rational rational); // прибавляют к нему число
    void sub(Rational rational); // отнимают число
    void mul(Rational rational); // умножают на число
    void div(Rational rational); // делят на число
 
    void neg();  // метод neg меняет знак на противоположный
    void inv();
    double to_double() const;

    // определяем оператор сложения "+=" для класса Rational так, чтобы он мог принимать в качестве аргументов и
    // объекты типа Rational
    Rational & operator+=(const Rational & rational) { 
        this->add(rational);   // выполняет метод add сложения
        return *this;  // возвращает полученный результат
    }
    // определяем оператор сложения "+=" для класса Rational так, чтобы он мог принимать в качестве аргументов и
    // объекты типа целые числа
    Rational & operator+=(int d)                      { 
        this->add(Rational(d));   // выполняет метод add сложения
        return *this;  // возвращает полученный результат
    }

    // определяем оператор вычитания "-=" для класса Rational так, чтобы он мог принимать в качестве аргументов и
    // объекты типа Rational
    Rational & operator-=(const Rational & rational) { 
        this->sub(rational);    
        return *this;  // возвращает полученный результат
    }

    // определяем оператор вычитания "-=" для класса Rational так, чтобы он мог принимать в качестве аргументов и
    // объекты типа целые числа
    Rational & operator-=(int d)                      { 
        this->sub(Rational(d)); 
        return *this;  // возвращает полученный результат
    }

    // определяем оператор умножения "*=" для класса Rational так, чтобы он мог принимать в качестве аргументов и
    // объекты типа Rational
    Rational & operator*=(const Rational & rational) { 
        this->mul(rational);
        return *this;  // возвращает полученный результат
    }

    // определяем оператор вычитания "-=" для класса Rational так, чтобы он мог принимать в качестве аргументов и
    // объекты типа  целые числа
    Rational & operator*=(int d)                     { 
        this->mul(Rational(d)); 
        return *this;  // возвращает полученный результат
    }

    // определяем оператор деления "/=" для класса Rational так, чтобы он мог принимать в качестве аргументов и
    // объекты типа Rational
    Rational & operator/=(const Rational & rational) { 
        this->div(rational);    
        return *this;  // возвращает полученный результат
    }

    // определяем оператор деления "/=" для класса Rational так, чтобы он мог принимать в качестве аргументов и
    // объекты типа целые числа
    Rational & operator/=(int d)                     { 
        this->div(Rational(d)); 
        return *this;  // возвращает полученный результат
    }

    // определяем операторы унарного минуса и плюса для класса Rational
    Rational operator-() const { Rational r(this->numerator_, this->denominator_); r.neg(); return r; }
    Rational operator+() const { Rational r(this->numerator_, this->denominator_);          return r; }
 
private:
    int numerator_;
    unsigned denominator_;
};